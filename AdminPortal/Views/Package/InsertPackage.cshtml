@model AdminPortal.Models.PackageViewModel
@{
    Layout = null;
    ViewData["Title"] = "Insert New Package";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <script>
        tailwind = {
            theme: {
                extend: {
                    fontFamily: { sans: ['Inter', 'sans-serif'] },
                    colors: { 'primary-pink': '#EC4899', 'success-green': '#10B981', 'danger-red': '#EF4444' }
                }
            }
        }
    </script>
    <script src="https://cdn.tailwindcss.com"></script>
    <title>@ViewData["Title"]</title>
    <style>
        .card {
            box-shadow: 0 4px 6px -1px rgba(0,0,0,.1), 0 2px 4px -1px rgba(0,0,0,.06);
            border-radius: .75rem;
        }

        .hidden {
            display: none;
        }
    </style>
</head>

<body class="bg-gray-100 font-sans p-6">

    <div class="max-w-6xl mx-auto">
        <h1 class="text-4xl font-extrabold text-gray-800 mb-2"><span class="text-primary-pink">Insert</span> New Package</h1>
        <p class="text-gray-500 mb-8">Follow the workflow to create package details and associated package items.</p>

        <form asp-controller="Package" asp-action="InsertPackage" method="post" id="packageForm" class="space-y-6" enctype="multipart/form-data">
            @Html.AntiForgeryToken()
            <div asp-validation-summary="ModelOnly" class="text-danger-red p-4 bg-red-100 rounded-lg"></div>

            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div class="card bg-white p-6 h-fit space-y-4">
                    <h2 class="text-2xl font-semibold mb-2 text-primary-pink border-b-2 pb-2">1. Create Package Details</h2>

                    <div>
                        <label asp-for="PackageImage" class="block text-sm font-medium text-gray-700 mb-1">Package Image</label>
                        <div class="mt-1 flex items-center">
                            <img id="image-preview" src="https://via.placeholder.com/150" alt="Image preview" class="h-24 w-24 rounded-lg object-cover">
                            <input asp-for="PackageImage" type="file" accept="image/*" class="ml-4 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-pink-50 file:text-primary-pink hover:file:bg-pink-100">
                        </div>
                    </div>

                    <div>
                        <label asp-for="Name" class="block text-sm font-medium text-gray-700 mb-1">Package Name</label>
                        <input asp-for="Name" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-primary-pink focus:border-primary-pink">
                        <span asp-validation-for="Name" class="text-danger-red text-sm"></span>
                    </div>
                    <div>
                        <label asp-for="packageType" class="block text-sm font-medium text-gray-700 mb-1">Package Type</label>
                        <select asp-for="packageType" required class="w-full px-4 py-2 border border-gray-300 rounded-lg bg-white focus:ring-primary-pink focus:border-primary-pink">
                            <option value="">-- Select Type --</option>
                            <option value="Entry">Entry</option>
                            <option value="Point">Point</option>
                            <option value="Reward">Reward</option>
                        </select>
                        <span asp-validation-for="packageType" class="text-danger-red text-sm"></span>
                    </div>
                    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                        <div>
                            <label asp-for="effectiveDate" class="block text-sm font-medium text-gray-700 mb-1">Effective Date</label>
                            <input asp-for="effectiveDate" type="date" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-primary-pink focus:border-primary-pink">
                            <span asp-validation-for="effectiveDate" class="text-danger-red text-sm"></span>
                        </div>
                        <div>
                            <label asp-for="LastValidDate" class="block text-sm font-medium text-gray-700 mb-1">Last Valid Date</label>
                            <input asp-for="LastValidDate" type="date" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-primary-pink focus:border-primary-pink">
                            <span asp-validation-for="LastValidDate" class="text-danger-red text-sm"></span>
                        </div>
                    </div>
                    <div>
                        <label asp-for="remark" class="block text-sm font-medium text-gray-700 mb-1">Remark (Manual/Notion Link)</label>
                        <textarea asp-for="remark" rows="3" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-primary-pink focus:border-primary-pink"></textarea>
                        <span asp-validation-for="remark" class="text-danger-red text-sm"></span>
                    </div>
                </div>

                <div class="space-y-6">
                    <div id="packageItemsContainer" class="space-y-6">
                        @for (var i = 0; i < Model.Items.Count; i++)
                        {
                            <div class="card bg-white p-6 package-item-card border-l-4 border-success-green">
                                <h3 class="text-xl font-semibold mb-4 text-success-green flex justify-between items-center">
                                    Package Item #@(i + 1)
                                    <button type="button" class="remove-item-btn text-danger-red hover:text-danger-red/80 p-1 rounded-full">
                                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="pointer-events: none;"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" /></svg>
                                    </button>
                                </h3>
                                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <div class="col-span-1 md:col-span-2">
                                        <label asp-for="Items[i].ItemName" class="block text-sm font-medium text-gray-700 mb-1">Attraction</label>
                                        <select asp-for="Items[i].ItemName" asp-items="@(ViewData["Attractions"] as SelectList)" required class="w-full px-4 py-2 border border-gray-300 rounded-lg bg-white">
                                            <option value="">-- Select --</option>
                                        </select>
                                        <span asp-validation-for="Items[i].ItemName" class="text-danger-red text-sm"></span>
                                    </div>
                                    <div>
                                        <label asp-for="Items[i].itemType" class="block text-sm font-medium text-gray-700 mb-1">Item Type</label>
                                        <select asp-for="Items[i].itemType" required class="w-full px-4 py-2 border border-gray-300 rounded-lg bg-white item-type-select">
                                            <option value="">-- Select --</option>
                                            <option value="Entry">Entry</option>
                                            <option value="Point">Point</option>
                                            <option value="Reward">Reward</option>
                                        </select>
                                        <span asp-validation-for="Items[i].itemType" class="text-danger-red text-sm"></span>
                                    </div>
                                    <div class="item-value-container hidden">
                                        <label asp-for="Items[i].Value" class="block text-sm font-medium text-gray-700 mb-1 item-value-label">Enter Value</label>
                                        <input asp-for="Items[i].Value" type="number" min="0" class="w-full px-4 py-2 border border-gray-300 rounded-lg item-value-input">
                                        <span asp-validation-for="Items[i].Value" class="text-danger-red text-sm"></span>
                                    </div>
                                    <div>
                                        <label asp-for="Items[i].AgeCategory" class="block text-sm font-medium text-gray-700 mb-1">Age Category</label>
                                        <select asp-for="Items[i].AgeCategory" asp-items="@(ViewData["AgeCategories"] as SelectList)" required class="w-full px-4 py-2 border border-gray-300 rounded-lg bg-white">
                                            <option value="">-- Select --</option>
                                        </select>
                                        <span asp-validation-for="Items[i].AgeCategory" class="text-danger-red text-sm"></span>
                                    </div>
                                    <div>
                                        <label asp-for="Items[i].EntryQty" class="block text-sm font-medium text-gray-700 mb-1">Entry Quantity</label>
                                        <input asp-for="Items[i].EntryQty" type="number" min="1" required placeholder="e.g. 1" class="w-full px-4 py-2 border border-gray-300 rounded-lg">
                                        <span asp-validation-for="Items[i].EntryQty" class="text-danger-red text-sm"></span>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    <button type="button" id="add-item-btn" class="w-full py-3 px-6 bg-success-green text-white font-semibold rounded-lg shadow-md hover:bg-success-green/90 transition flex items-center justify-center text-lg">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v6m-3-3h6" /></svg>
                        Add Package Item
                    </button>
                </div>
            </div>
            <div class="pt-6 border-t border-gray-200 mt-6 flex justify-end">
                <button type="submit" class="py-3 px-8 bg-primary-pink text-white font-bold rounded-lg shadow-lg hover:bg-primary-pink/90 transition text-lg">
                    Submit Package
                </button>
            </div>
        </form>
    </div>

    <template id="itemTemplate">
        <div class="card bg-white p-6 package-item-card border-l-4 border-success-green">
            <h3 class="text-xl font-semibold mb-4 text-success-green flex justify-between items-center">
                Package Item #__INDEX_PLACEHOLDER__
                <button type="button" class="remove-item-btn text-danger-red hover:text-danger-red/80 p-1 rounded-full">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="pointer-events: none;"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" /></svg>
                </button>
            </h3>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div class="col-span-1 md:col-span-2">
                    <label class="block text-sm font-medium text-gray-700 mb-1">Attraction</label>
                    <select name="Items[__INDEX__].ItemName" required class="w-full px-4 py-2 border border-gray-300 rounded-lg bg-white attraction-select">
                        <option value="">-- Select --</option>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Item Type</label>
                    <select name="Items[__INDEX__].itemType" required class="w-full px-4 py-2 border border-gray-300 rounded-lg bg-white item-type-select">
                        <option value="">-- Select --</option>
                        <option value="Entry">Entry</option>
                        <option value="Point">Point</option>
                        <option value="Reward">Reward</option>
                    </select>
                </div>
                <div class="item-value-container hidden">
                    <label class="block text-sm font-medium text-gray-700 mb-1 item-value-label">Enter Value</label>
                    <input name="Items[__INDEX__].Value" type="number" min="0" class="w-full px-4 py-2 border border-gray-300 rounded-lg item-value-input">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Age Category</label>
                    <select name="Items[__INDEX__].AgeCategory" required class="w-full px-4 py-2 border border-gray-300 rounded-lg bg-white age-category-select">
                        <option value="">-- Select --</option>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Entry Quantity</label>
                    <input name="Items[__INDEX__].EntryQty" type="number" min="1" required placeholder="e.g. 1" class="w-full px-4 py-2 border border-gray-300 rounded-lg">
                </div>
            </div>
        </div>
    </template>

    @section Scripts {
        @{
            await Html.RenderPartialAsync("_ValidationScriptsPartial");
        }
    }
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const container = document.getElementById('packageItemsContainer');
            const addBtn = document.getElementById('add-item-btn');
            const template = document.getElementById('itemTemplate');
            const ageCategories = @Html.Raw(Json.Serialize(ViewData["AgeCategories"]));
            const attractions = @Html.Raw(Json.Serialize(ViewData["Attractions"]));

            function toggleItemInputs(card) {
                const select = card.querySelector('.item-type-select');
                const box = card.querySelector('.item-value-container');
                const label = card.querySelector('.item-value-label');
                const input = card.querySelector('.item-value-input');
                if (!select || !box) return;

                const val = select.value;
                if (val === 'Entry') {
                    box.classList.remove('hidden');
                    if (label) label.textContent = 'Enter Value (Price)';
                    if (input) {
                        input.placeholder = 'e.g. 29.99';
                        input.step = '0.01';
                    }
                } else if (val === 'Point' || val === 'Reward') {
                    box.classList.remove('hidden');
                    if (label) label.textContent = 'Enter Value (Points)';
                    if (input) {
                        input.placeholder = 'e.g. 100';
                        input.step = '1';
                    }
                } else {
                    box.classList.add('hidden');
                }
            }

            function addPackageItem() {
                const index = container.querySelectorAll('.package-item-card').length;
                const clone = template.content.cloneNode(true);

                // Populate the Age Category dropdown
                const ageCategorySelect = clone.querySelector('.age-category-select');
                if (ageCategorySelect) {
                    ageCategories.forEach(category => {
                        const option = document.createElement('option');
                        option.value = category.value;
                        option.text = category.text;
                        ageCategorySelect.appendChild(option);
                    });
                }

                // Populate the Attraction dropdown
                const attractionSelect = clone.querySelector('.attraction-select');
                if (attractionSelect) {
                    attractions.forEach(attraction => {
                        const option = document.createElement('option');
                        option.value = attraction.value;
                        option.text = attraction.text;
                        attractionSelect.appendChild(option);
                    });
                }

                // Update names and placeholders for the new item
                clone.querySelectorAll('[name*="__INDEX__"]').forEach(el => {
                    el.name = el.name.replace('__INDEX__', index);
                });
                const placeholder = clone.querySelector('h3');
                if(placeholder) {
                   placeholder.innerHTML = placeholder.innerHTML.replace('__INDEX_PLACEHOLDER__', index + 1);
                }

                container.appendChild(clone);
                const newCard = container.lastElementChild;
                toggleItemInputs(newCard); // Run logic for the new card

                const mainPackageType = document.getElementById('packageType').value;
                if (mainPackageType) {
                    // Find the dropdown in the new card and set its value
                    const newItemTypeSelect = newCard.querySelector('.item-type-select');
                    if (newItemTypeSelect) {
                        newItemTypeSelect.value = mainPackageType;
                    }
                }

            }

            // Event Listeners
            addBtn.addEventListener('click', addPackageItem);

            container.addEventListener('click', e => {
                if (e.target.closest('.remove-item-btn')) {
                    e.target.closest('.package-item-card').remove();
                }
            });

            container.addEventListener('change', e => {
                if (e.target.classList.contains('item-type-select')) {
                    toggleItemInputs(e.target.closest('.package-item-card'));
                }
            });

            // Initial State Logic
            container.querySelectorAll('.package-item-card').forEach(toggleItemInputs);

            document.getElementById('PackageImage').addEventListener('change', function(event) {
                const preview = document.getElementById('image-preview');
                const file = event.target.files[0];
                if (file) {
                    preview.src = URL.createObjectURL(file);
                }
            });
        });
    </script>
</body>
</html>